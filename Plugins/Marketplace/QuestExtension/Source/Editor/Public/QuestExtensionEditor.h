// Copyright 2015-2019 Piperift. All Rights Reserved.
#pragma once

#include "PropertyEditorModule.h"
#include "IAssetTools.h"
#include "EdGraphUtilities.h"
#include <ComponentVisualizer.h>

#include "QuestGraph/IQuestGroupEditor.h"
#include "QuestGraph/QuestGroupPanelNodeFactory.h"
#include "ConditionGraph/ConditionGraphPanelNodeFactory.h"

#include "Quests/QuestGroup.h"


DECLARE_LOG_CATEGORY_EXTERN(LogQuestEd, All, All)

class FQuestExtensionEditorModule: public IModuleInterface
{
public:
	virtual void StartupModule() override;
	virtual void ShutdownModule() override;

	// Get Quest Extension Editor module instance
	FORCEINLINE static FQuestExtensionEditorModule& GetInstance() {
		return FModuleManager::LoadModuleChecked<FQuestExtensionEditorModule>("QuestExtensionEditor");
	}

private:

	void RegisterPropertyTypeCustomizations();
	void PrepareAutoGeneratedDefaultEvents();
	void RegisterComponentVisualizer(FName ComponentClassName, TSharedPtr<FComponentVisualizer> Visualizer);

	/**
	* Registers a custom struct
	*
	* @param StructName				The name of the struct to register for property customization
	* @param StructLayoutDelegate	The delegate to call to get the custom detail layout instance
	*/
	void RegisterCustomPropertyTypeLayout(FName PropertyTypeName, FOnGetPropertyTypeCustomizationInstance PropertyTypeLayoutDelegate);

	template<class T>
	void RegisterCustomPinFactory();

	void RegisterAssetTypeAction(IAssetTools& AssetTools, TSharedRef<IAssetTypeActions> Action)
	{
		AssetTools.RegisterAssetTypeActions(Action);
		CreatedAssetTypeActions.Add(Action);
	}

	//Simplify Registering generated default events
#define RegisterDefaultEvent(Class, FuncName) \
	(FKismetEditorUtilities::RegisterAutoGeneratedDefaultEvent(this, Class::StaticClass(), GET_FUNCTION_NAME_CHECKED(Class, FuncName)))


	/** All created asset type actions.  Cached here so that we can unregister them during shutdown. */
	TArray< TSharedPtr<IAssetTypeActions> > CreatedAssetTypeActions;
	/** All created pin factories.  Cached here so that we can unregister them during shutdown. */
	TArray< TSharedPtr<FGraphPanelPinFactory> > CreatedPinFactories;
	TArray<FName> RegisteredComponentClassNames;

	TSharedPtr<struct FGraphPanelPinConnectionFactory> GraphConnectionFactory;
	/** Node factory for condition graph */
	TSharedPtr<FConditionGraphPanelNodeFactory> ConditionGraphPanelNodeFactory;
	/** Node factory for quest group graph */
	TSharedPtr<FQuestGroupPanelNodeFactory> QuestGroupPanelNodeFactory;

public:

	/** Creates a new quest group editor. */
	TSharedRef<IQuestGroupEditor> CreateQuestGroupEditor(const EToolkitMode::Type Mode, const TSharedPtr< IToolkitHost >& InitToolkitHost, UQuestGroup*  Questgroup);


	TSharedPtr<struct FGraphNodeClassHelper> GetQGClassCache() { return QGClassCache; }
	TSharedPtr<struct FGraphNodeClassHelper> GetConditionClassCache() { return ConditionClassCache; }

private:

	TSharedPtr<struct FGraphNodeClassHelper> QGClassCache;
	TSharedPtr<struct FGraphNodeClassHelper> ConditionClassCache;
};
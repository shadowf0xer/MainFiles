/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
///		Copyright 2020 (C) Bruno Xavier B. Leite
//////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "LE_ItemSky.h"
#include "Engine/SkyLight.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define LOCTEXT_NAMESPACE "Synaptech"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SLE_ItemSky::SLE_ItemSky(){}
SLE_ItemSky::~SLE_ItemSky(){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void SLE_ItemSky::Construct(const FArguments &InArgs, ASkyLight* Target) {
	TSharedRef<SButton>Button = SNew(SButton);
	FText Caption = FText::FromString(TEXT(""));
	//
	Item = Target;
	if (Item.IsValid()) {Caption=FText::FromString(Item->GetActorLabel());}
	//
	SAssignNew(Button,SButton)
	.ButtonStyle(FEditorStyle::Get(),"FlatButton.Default")
	.ForegroundColor(FSlateColor::UseForeground())
	.OnClicked(this,&SLE_ItemSky::OnClickedItem)
	.HAlign(HAlign_Fill).VAlign(VAlign_Fill)
	[
		SNew(SHorizontalBox)
		+SHorizontalBox::Slot().AutoWidth()
		[
			SNew(SImage)
			.Image(this,&SLE_ItemSky::GetTypeBrush)
			.ToolTipText(this,&SLE_ItemSky::GetTypeTooltip)
		]
		+SHorizontalBox::Slot().Padding(2)
		.HAlign(HAlign_Fill).VAlign(VAlign_Center)
		[
			SNew(STextBlock).Margin(FMargin(2))
			.Font(FEditorStyle::GetFontStyle(TEXT("BoldFont")))
			.Justification(ETextJustify::Center)
			.Text(Caption)
		]
	];//
	//
	//
	ChildSlot
	.HAlign(HAlign_Fill)
	.VAlign(VAlign_Fill)
	[
		SNew(SBox).Padding(FMargin(4))
		[
			Button
		]
	];
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

FReply SLE_ItemSky::OnClickedItem() {
	if (GEditor && Item.IsValid()) {
		GEditor->SelectNone(true,true,true);
		GEditor->SelectActor(Item.Get(),true,true,true,true);
		//
		TArray<AActor*>Actors; Actors.Add(Item.Get());
		GEditor->MoveViewportCamerasToActor(Actors,true);
	}///
	//
	return FReply::Handled();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

FText SLE_ItemSky::GetTypeTooltip() const {
	return FText::FromString(TEXT("Sky Light Source"));
}

const FSlateBrush* SLE_ItemSky::GetTypeBrush() const {
	return FLE_EditorStyle::Get()->GetBrush(TEXT("LE.Sky"));
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool SLE_ItemSky::IsInteractable() const {
	return IsEnabled();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef LOCTEXT_NAMESPACE

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
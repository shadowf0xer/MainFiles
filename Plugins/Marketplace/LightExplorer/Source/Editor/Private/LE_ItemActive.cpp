/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
///		Copyright 2020 (C) Bruno Xavier B. Leite
//////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "LE_ItemActive.h"
#include "Components/LightComponent.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define LOCTEXT_NAMESPACE "Synaptech"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SLE_ItemActive::SLE_ItemActive(){}
SLE_ItemActive::~SLE_ItemActive(){}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void SLE_ItemActive::Construct(const FArguments &InArgs, ALight* Target) {
	Item = Target;
	//
	//
	ChildSlot.HAlign(HAlign_Fill).VAlign(VAlign_Fill)
	[
		SNew(SBox)
		.Padding(FMargin(4))
		[
			SNew(SBorder).Padding(FMargin(6))
			.VAlign(VAlign_Fill).HAlign(HAlign_Fill)
			.BorderImage(FEditorStyle::GetBrush("ToolPanel.DarkGroupBorder"))
			[
				SNew(SHorizontalBox)
				+SHorizontalBox::Slot()
				.VAlign(VAlign_Center)
				[
					SNew(STextBlock)
					.Font(FEditorStyle::GetFontStyle(TEXT("BoldFont")))
					.Text(FText::FromString(TEXT("Is Enabled")))
					.Justification(ETextJustify::Center)
				]
				+SHorizontalBox::Slot().AutoWidth()
				.VAlign(VAlign_Center).HAlign(HAlign_Right)
				[
					SNew(SCheckBox)
					.IsChecked(this,&SLE_ItemActive::GetState)
					.OnCheckStateChanged(this,&SLE_ItemActive::OnStateChanged)
				]
			]
		]
	];
}

void SLE_ItemActive::OnStateChanged(ECheckBoxState NewState) {
	if (!Item.IsValid()) {return;}
	//
	FPropertyChangedEvent PropEditEvent(ULightComponent::StaticClass()->FindPropertyByName(GET_MEMBER_NAME_CHECKED(ULightComponent,bAffectsWorld)));
	EComponentMobility::Type Mobility = Item->GetLightComponent()->Mobility;
	uint32 AffectsWorld = (NewState==ECheckBoxState::Checked) ? 1 : 0;
	//
	Item->Modify();
	Item->GetLightComponent()->Mobility = EComponentMobility::Stationary;
	Item->GetLightComponent()->bAffectsWorld = AffectsWorld;
	Item->GetLightComponent()->InvalidateLightingCache();
	Item->GetLightComponent()->MarkRenderStateDirty();
	//
	Item->GetLightComponent()->PostEditChangeProperty(PropEditEvent);
	Item->GetLightComponent()->Mobility = Mobility;
}

ECheckBoxState SLE_ItemActive::GetState() const {
	if (!Item.IsValid()) {return ECheckBoxState::Undetermined;}
	//
	if (Item->GetLightComponent()->bAffectsWorld) {
		return ECheckBoxState::Checked;
	}	return ECheckBoxState::Unchecked;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef LOCTEXT_NAMESPACE

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////